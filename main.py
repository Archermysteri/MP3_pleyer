# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui/main.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
import os
from pygame import mixer
import pygame
import datetime
import mutagen
class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(350, 474)
        Form.setMinimumSize(QtCore.QSize(350, 474))
        Form.setMaximumSize(QtCore.QSize(350, 474))
        Form.setStyleSheet("background-color: rgb(74, 72, 72);")
        self.listWidget = QtWidgets.QListWidget(Form)
        self.listWidget.setGeometry(QtCore.QRect(0, 134, 351, 281))
        self.listWidget.setToolTip("")
        self.listWidget.setStyleSheet("background-color: rgb(42, 39, 39);\n"
                                      "color: rgb(255, 255, 255);\n"
                                      "")
        self.listWidget.setObjectName("listWidget")
        self.pushButton_add_folder = QtWidgets.QPushButton(Form)
        self.pushButton_add_folder.setGeometry(QtCore.QRect(10, 424, 41, 41))
        font = QtGui.QFont()
        font.setPointSize(22)
        self.pushButton_add_folder.setFont(font)
        self.pushButton_add_folder.setStyleSheet("background-color: rgb(42, 39, 39);\n"
                                                 "color: rgb(255, 255, 255);")
        self.pushButton_add_folder.setObjectName("pushButton_add_folder")
        self.pushButton_add_file = QtWidgets.QPushButton(Form)
        self.pushButton_add_file.setGeometry(QtCore.QRect(66, 424, 41, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_add_file.setFont(font)
        self.pushButton_add_file.setStyleSheet("background-color: rgb(42, 39, 39);\n"
                                               "color: rgb(255, 255, 255);")
        self.pushButton_add_file.setObjectName("pushButton_add_file")
        self.pushButton_del = QtWidgets.QPushButton(Form)
        self.pushButton_del.setGeometry(QtCore.QRect(122, 424, 41, 40))
        font = QtGui.QFont()
        font.setPointSize(22)
        self.pushButton_del.setFont(font)
        self.pushButton_del.setStyleSheet("background-color: rgb(42, 39, 39);\n"
                                          "color: rgb(255, 255, 255);")
        self.pushButton_del.setObjectName("pushButton_del")
        self.horizontalSlider_time = QtWidgets.QSlider(Form)
        self.horizontalSlider_time.setGeometry(QtCore.QRect(0, 114, 351, 21))
        self.horizontalSlider_time.setStyleSheet("background-color: rgb(42, 39, 39);\n"
                                                 "selection-background-color: rgb(255, 255, 255);")
        self.horizontalSlider_time.setMinimum(0)
        self.horizontalSlider_time.setMaximum(100)
        self.horizontalSlider_time.setPageStep(0)
        self.horizontalSlider_time.setProperty("value", 0)
        self.horizontalSlider_time.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_time.setObjectName("horizontalSlider_time")
        self.horizontalSlider_time.setEnabled(False)

        self.label_time = QtWidgets.QLabel(Form)
        self.label_time.setGeometry(QtCore.QRect(240, 44, 111, 71))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_time.setFont(font)
        self.label_time.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_time.setStyleSheet("color: rgb(255, 255, 255);\n"
                                      "background-color: rgb(42, 39, 39);")
        self.label_time.setText("")
        self.label_time.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_time.setObjectName("label_time")
        self.pushButton_befor = QtWidgets.QPushButton(Form)
        self.pushButton_befor.setGeometry(QtCore.QRect(16, 81, 30, 30))
        font = QtGui.QFont()
        font.setPointSize(22)
        self.pushButton_befor.setFont(font)
        self.pushButton_befor.setStyleSheet("background-color: rgb(42, 39, 39);\n"
                                            "color: rgb(255, 255, 255);")
        self.pushButton_befor.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("ui/../Image/4.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_befor.setIcon(icon)
        self.pushButton_befor.setIconSize(QtCore.QSize(32, 32))
        self.pushButton_befor.setObjectName("pushButton_befor")
        self.pushButton_next = QtWidgets.QPushButton(Form)
        self.pushButton_next.setGeometry(QtCore.QRect(116, 81, 30, 30))
        font = QtGui.QFont()
        font.setPointSize(22)
        self.pushButton_next.setFont(font)
        self.pushButton_next.setStyleSheet("background-color: rgb(42, 39, 39);\n"
                                           "color: rgb(255, 255, 255);")
        self.pushButton_next.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("ui/../Image/3.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_next.setIcon(icon1)
        self.pushButton_next.setIconSize(QtCore.QSize(32, 32))
        self.pushButton_next.setObjectName("pushButton_next")
        self.horizontalSlider_Root = QtWidgets.QSlider(Form)
        self.horizontalSlider_Root.setGeometry(QtCore.QRect(0, 44, 241, 21))
        self.horizontalSlider_Root.setStyleSheet("background-color: rgb(42, 39, 39);\n"
                                                 "selection-background-color: rgb(255, 255, 255);")
        self.horizontalSlider_Root.setMinimum(0)
        self.horizontalSlider_Root.setMaximum(100)
        self.horizontalSlider_Root.setPageStep(0)
        self.horizontalSlider_Root.setProperty("value", 0)
        self.horizontalSlider_Root.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_Root.setObjectName("horizontalSlider_Root")
        self.toolButton_start = QtWidgets.QToolButton(Form)
        self.toolButton_start.setGeometry(QtCore.QRect(65, 81, 30, 30))
        self.toolButton_start.setStyleSheet("background-color: rgb(42, 39, 39);\n"
                                            "color: rgb(255, 255, 255);")
        self.toolButton_start.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("ui/../../../.designer/Image/1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon2.addPixmap(QtGui.QPixmap("ui/../Image/2.png"), QtGui.QIcon.Disabled, QtGui.QIcon.On)
        icon2.addPixmap(QtGui.QPixmap("ui/../Image/2.png"), QtGui.QIcon.Active, QtGui.QIcon.Off)
        icon2.addPixmap(QtGui.QPixmap("ui/../Image/1.png"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toolButton_start.setIcon(icon2)
        self.toolButton_start.setIconSize(QtCore.QSize(32, 32))
        self.toolButton_start.setCheckable(True)
        self.toolButton_start.setChecked(False)
        self.toolButton_start.setAutoRepeat(False)
        self.toolButton_start.setAutoExclusive(False)
        self.toolButton_start.setAutoRaise(False)
        self.toolButton_start.setObjectName("toolButton_start")
        self.toolButton_Root = QtWidgets.QToolButton(Form)
        self.toolButton_Root.setGeometry(QtCore.QRect(200, 81, 30, 30))
        self.toolButton_Root.setStyleSheet("background-color: rgb(42, 39, 39);\n"
                                           "color: rgb(255, 255, 255);")
        self.toolButton_Root.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("ui/../Image/6.png"), QtGui.QIcon.Active, QtGui.QIcon.Off)
        icon3.addPixmap(QtGui.QPixmap("ui/../Image/5.png"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toolButton_Root.setIcon(icon3)
        self.toolButton_Root.setIconSize(QtCore.QSize(32, 32))
        self.toolButton_Root.setCheckable(True)
        self.toolButton_Root.setChecked(False)
        self.toolButton_Root.setObjectName("toolButton_Root")
        self.label_pley = QtWidgets.QLabel(Form)
        self.label_pley.setGeometry(QtCore.QRect(10, 14, 330, 21))
        self.label_pley.setStyleSheet("background-color: rgb(42, 39, 39);\n"
                                      "color: rgb(255, 255, 255);\n"
                                      "")
        self.label_pley.setText("")
        self.label_pley.setObjectName("label_pley")
        self.pushButton_stop = QtWidgets.QPushButton(Form)
        self.pushButton_stop.setGeometry(QtCore.QRect(157, 80, 30, 30))
        font = QtGui.QFont()
        font.setPointSize(22)
        self.pushButton_stop.setFont(font)
        self.pushButton_stop.setStyleSheet("background-color: rgb(42, 39, 39);\n"
                                           "color: rgb(255, 255, 255);")
        self.pushButton_stop.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("ui/../Image/7.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_stop.setIcon(icon4)
        self.pushButton_stop.setIconSize(QtCore.QSize(32, 32))
        self.pushButton_stop.setObjectName("pushButton_stop")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        global play,start
        start = False
        play=False

        with sqlite3.connect("db.db") as db:
                cursor = db.cursor()
                cursor.execute("SELECT name FROM music;")
                name = cursor.fetchall()
                cursor.execute("SELECT path FROM music;")
                path = cursor.fetchall()
                for i in range(len(name)-1):

                        if os.path.exists(path[i][0]):

                                self.listWidget.addItem(name[i][0])
                        else:

                            cursor.execute("DELETE FROM music WHERE path = ?", [path[i][0]])

        self.add_functions()
        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.Second)
        self.timer.start()


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "MP3 pleyer"))
        self.listWidget.setWhatsThis(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.pushButton_add_folder.setText(_translate("Form", "+"))
        self.pushButton_add_file.setText(_translate("Form", "+"))
        self.pushButton_del.setText(_translate("Form", "-"))
    def root_on_off(self,on_off):
            self.horizontalSlider_Root.setEnabled(not on_off)
            if on_off:
                mixer.music.set_volume(0)
            else:
                mixer.music.set_volume(self.horizontalSlider_Root.value() / 100)
    def add_folder(self):
        try:
                folder = QtWidgets.QFileDialog.getExistingDirectory(None, "Select Folder")
                k1=0
                for f in os.scandir(folder):
                        if f.is_file() and f.path.split('.')[-1].lower() == 'mp3':

                                file = f.path
                                name_1 = file.split("/")
                                name = name_1[len(name_1) - 1]

                                with sqlite3.connect("db.db") as db:
                                        cursor = db.cursor()
                                        cursor.execute("SELECT name FROM music WHERE name=(?);", [name])
                                        k = cursor.fetchall()
                                        if k == []:
                                                cursor.execute("SELECT * FROM music;")
                                                all_results = cursor.fetchall()
                                                id = len(all_results) + 1
                                                cursor.execute(f"""INSERT OR IGNORE INTO music VALUES(?,?,?);""", [id, file, name])

                                                self.listWidget.addItem(name)
                                        else:
                                                k1+=1

                cursor.execute("DELETE FROM music WHERE id=(?);",[id])
                if k1 !=0:
                    if k1 ==1:
                        msg = QtWidgets.QMessageBox()
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setText("Error")
                        msg.setInformativeText('1 file already exists')
                        msg.setWindowTitle("Error")
                        msg.exec_()
                    else:
                        msg = QtWidgets.QMessageBox()
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setText("Error")
                        msg.setInformativeText(f'{k1} files already exists')
                        msg.setWindowTitle("Error")
                        msg.exec_()
        except:
            pass
    def add_file(self):
        try:
            file = QtWidgets.QFileDialog.getOpenFileName(None, "Select file",None, "Audio (*.mp3)")[0]
            name_1 = file.split("/")
            name=name_1[len(name_1)-1]

            with sqlite3.connect("db.db") as db:
                    cursor = db.cursor()
                    cursor.execute("SELECT name FROM music WHERE name=(?);",[name])
                    k = cursor.fetchall()
                    if k ==[]:
                        cursor.execute("SELECT * FROM music;")
                        all_results = cursor.fetchall()
                        id = len(all_results)+1
                        cursor.execute(f"""INSERT INTO music VALUES(?,?,?);""",[id,file,name])

                        self.listWidget.addItem(name)
                    else:
                            msg = QtWidgets.QMessageBox()
                            msg.setIcon(QtWidgets.QMessageBox.Critical)
                            msg.setText("Error")
                            msg.setInformativeText('Such a file already exists')
                            msg.setWindowTitle("Error")
                            msg.exec_()
        except:
            pass
    def del_music(self):
        listItems = self.listWidget.selectedItems()
        if not listItems: return
        for item in listItems:
            self.listWidget.takeItem(self.listWidget.row(item))
            with sqlite3.connect("db.db") as db:
                cursor = db.cursor()
                cursor.execute("DELETE FROM music WHERE name=(?);",[item.text()])
        listItems = self.listWidget.selectedItems()
        if listItems==[]:
            mixer.music.stop()
    def mus_on_off(self):
       global start,play

       if not self.listWidget.selectedItems():
           self.toolButton_start.setChecked(False)
           return


       with sqlite3.connect("db.db") as db:
            cursor = db.cursor()
            cursor.execute("SELECT path FROM music WHERE name=(?);", [self.listWidget.selectedItems()[0].text()])
            mp3 = cursor.fetchall()
            if self.toolButton_Root.isChecked():
                mixer.music.set_volume(0)
            else:
                mixer.music.set_volume(self.horizontalSlider_Root.value()/100)
            if start==False:
                mixer.music.load(mp3[0][0])
                MUSIC_END = pygame.USEREVENT + 1
                pygame.mixer.music.set_endevent(MUSIC_END)
                self.label_pley.setText(self.listWidget.selectedItems()[0].text())
                mixer.music.play()
                start=True
                play=True
            else:
                if play==False:
                    mixer.music.unpause()
                    play = True
                else:
                    mixer.music.pause()
                    play = False

    def mus_stop(self):
        global start, play
        start = False
        play = False
        mixer.music.stop()
        self.toolButton_start.setChecked(False)
    def cange_listWidget(self):
        global start, play
        if play==True:
            start = False
            play = False
            self.mus_on_off()

    def cange_Root(self):

        mixer.music.set_volume(self.horizontalSlider_Root.value()/100)
    def next(self):
        cur = self.listWidget.currentRow()
        if self.listWidget.count()-1 == cur:
            pass
        else:
            self.listWidget.setCurrentRow(cur + 1)
        self.label_time.setText("")

    def befor(self):
        cur = self.listWidget.currentRow()
        if cur == 0:
            pass
        else:
            self.listWidget.setCurrentRow(cur - 1)
        self.label_time.setText("")

    def add_functions(self):
            self.toolButton_Root.clicked.connect(lambda: self.root_on_off(self.toolButton_Root.isChecked()))
            self.pushButton_add_folder.clicked.connect(lambda: self.add_folder())

            self.pushButton_add_file.clicked.connect(lambda: self.add_file())
            self.pushButton_del.clicked.connect(lambda: self.del_music())
            self.toolButton_start.clicked.connect(lambda: self.mus_on_off())
            self.pushButton_stop.clicked.connect(lambda: self.mus_stop())
            self.horizontalSlider_Root.valueChanged.connect(lambda: self.cange_Root())
            self.listWidget.itemSelectionChanged.connect(lambda: self.cange_listWidget())
            self.pushButton_next.clicked.connect(lambda: self.next())
            self.pushButton_befor.clicked.connect(lambda: self.befor())

    def Second(self):
        with sqlite3.connect("db.db") as db:
            cursor = db.cursor()
            if mixer.music.get_pos() !=-1:
                cursor.execute("SELECT path FROM music WHERE name=(?);", [self.listWidget.selectedItems()[0].text()])
                mp3 = cursor.fetchall()[0][0]

                audiofile = mutagen.File(mp3)

                length = (audiofile.info.length*1000)
                time_l1= str(datetime.timedelta(milliseconds=round(mixer.music.get_pos()))).split(".")
                time_l2 = time_l1[0].split(":")
                time_l2.pop(0)
                time_l2[0] = str(int(time_l2[0]))
                time_l2[1] = str(int(time_l2[1]))

                time = ":".join(time_l2)
                self.label_time.setText(time)
                p=str(round((mixer.music.get_pos()*100)/length))

                self.horizontalSlider_time.setValue(int(p))
                if p=="99":
                    cur = self.listWidget.currentRow()
                    if self.listWidget.count() - 1 == cur:
                        pass
                    else:
                        self.listWidget.setCurrentRow(cur + 1)


if __name__ == "__main__":
    import sys
    mixer.init()
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())


